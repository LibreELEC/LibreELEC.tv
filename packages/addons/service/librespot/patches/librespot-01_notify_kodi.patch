diff --git a/core/src/spotify_id.rs b/core/src/spotify_id.rs
index e6e2bae..63bb73e 100644
--- a/core/src/spotify_id.rs
+++ b/core/src/spotify_id.rs
@@ -10,6 +10,12 @@ pub enum SpotifyAudioType {
     NonPlayable,
 }
 
+impl fmt::Display for SpotifyAudioType {
+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
+        write!(f, "{:?}", self)
+    }
+}
+
 impl From<&str> for SpotifyAudioType {
     fn from(v: &str) -> Self {
         match v {
diff --git a/playback/src/config.rs b/playback/src/config.rs
index c442fae..e73857d 100644
--- a/playback/src/config.rs
+++ b/playback/src/config.rs
@@ -138,6 +138,7 @@ pub struct PlayerConfig {
     pub normalisation_attack: Duration,
     pub normalisation_release: Duration,
     pub normalisation_knee: f64,
+    pub notify_kodi: bool,
 
     // pass function pointers so they can be lazily instantiated *after* spawning a thread
     // (thereby circumventing Send bounds that they might not satisfy)
@@ -159,6 +160,7 @@ impl Default for PlayerConfig {
             normalisation_knee: 1.0,
             passthrough: false,
             ditherer: Some(mk_ditherer::<TriangularDitherer>),
+            notify_kodi: false,
         }
     }
 }
diff --git a/playback/src/player.rs b/playback/src/player.rs
index a7ff916..5a31bcb 100644
--- a/playback/src/player.rs
+++ b/playback/src/player.rs
@@ -1868,6 +1868,10 @@ impl PlayerInternal {
         }
     }
 
+    fn notify_kodi(&mut self, event: String) {
+        eprintln!("@{}", event);
+    }
+
     fn send_event(&mut self, event: PlayerEvent) {
         let mut index = 0;
         while index < self.event_senders.len() {
@@ -1878,6 +1882,16 @@ impl PlayerInternal {
                 }
             }
         }
+        if self.config.notify_kodi {
+            use PlayerEvent::*;
+            match event {
+                Playing {track_id, .. } => self.notify_kodi(["Playing",
+                                               &track_id.audio_type.to_string(),
+                                               &track_id.to_base62()].join(" ")),
+                Stopped { .. } => self.notify_kodi("Stopped".to_string()),
+                _ => ()
+            }
+        }
     }
 
     fn load_track(
diff --git a/src/main.rs b/src/main.rs
index a3522e8..3a0a9d4 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -424,6 +424,11 @@ fn get_setup(args: &[String]) -> Setup {
         "",
         PASSTHROUGH,
         "Pass a raw stream to the output. Only works with the pipe and subprocess backends.",
+    )
+    .optflag(
+        "",
+       "notify-kodi",
+        "Notify Kodi",
     );
 
     let matches = match opts.parse(&args[1..]) {
@@ -750,6 +755,8 @@ fn get_setup(args: &[String]) -> Setup {
 
         let passthrough = matches.opt_present(PASSTHROUGH);
 
+        let notify_kodi = matches.opt_present("notify-kodi");
+
         PlayerConfig {
             bitrate,
             gapless,
@@ -763,6 +770,7 @@ fn get_setup(args: &[String]) -> Setup {
             normalisation_release,
             normalisation_knee,
             ditherer,
+            notify_kodi,
         }
     };
 
