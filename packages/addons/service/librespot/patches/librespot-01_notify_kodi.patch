commit 55fdcc7d996a7cce34b04845272e7a68328515ea
Author: Maximilian Hess <mail@ne0h.de>
Date:   Tue Aug 9 17:32:45 2022 +0200

    Adapt for Kodi

diff --git a/core/src/spotify_id.rs b/core/src/spotify_id.rs
index 10298a4..afb347a 100644
--- a/core/src/spotify_id.rs
+++ b/core/src/spotify_id.rs
@@ -11,6 +11,12 @@ pub enum SpotifyAudioType {
     NonPlayable,
 }
 
+impl fmt::Display for SpotifyAudioType {
+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
+        write!(f, "{:?}", self)
+    }
+}
+
 impl From<&str> for SpotifyAudioType {
     fn from(v: &str) -> Self {
         match v {
diff --git a/playback/src/config.rs b/playback/src/config.rs
index f1276ad..0f81d21 100644
--- a/playback/src/config.rs
+++ b/playback/src/config.rs
@@ -139,6 +139,7 @@ pub struct PlayerConfig {
     // pass function pointers so they can be lazily instantiated *after* spawning a thread
     // (thereby circumventing Send bounds that they might not satisfy)
     pub ditherer: Option<DithererBuilder>,
+    pub notify_kodi: bool,
 }
 
 impl Default for PlayerConfig {
@@ -156,6 +157,7 @@ impl Default for PlayerConfig {
             normalisation_knee_db: 5.0,
             passthrough: false,
             ditherer: Some(mk_ditherer::<TriangularDitherer>),
+            notify_kodi: false,
         }
     }
 }
diff --git a/playback/src/player.rs b/playback/src/player.rs
index a693501..16d2252 100644
--- a/playback/src/player.rs
+++ b/playback/src/player.rs
@@ -1915,6 +1915,22 @@ impl PlayerInternal {
     fn send_event(&mut self, event: PlayerEvent) {
         self.event_senders
             .retain(|sender| sender.send(event.clone()).is_ok());
+
+        if self.config.notify_kodi {
+            use PlayerEvent::*;
+            match event {
+                Playing { track_id, .. } => self.notify_kodi(
+                    [
+                        "Playing",
+                        &track_id.audio_type.to_string(),
+                        &track_id.to_base62().unwrap(),
+                    ]
+                    .join(" "),
+                ),
+                Stopped { .. } => self.notify_kodi("Stopped".to_string()),
+                _ => (),
+            }
+        }
     }
 
     fn load_track(
@@ -1971,6 +1987,10 @@ impl PlayerInternal {
             stream_loader_controller.fetch_next_blocking(wait_for_data_length);
         }
     }
+
+    fn notify_kodi(&mut self, event: String) {
+        eprintln!("@{}", event);
+    }
 }
 
 impl Drop for PlayerInternal {
diff --git a/src/main.rs b/src/main.rs
index 0c542f6..4592f78 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -560,7 +560,12 @@ fn get_setup() -> Setup {
         AP_PORT,
         "Connect to an AP with a specified port 1 - 65535. If no AP with that port is present a fallback AP will be used. Available ports are usually 80, 443 and 4070.",
         "PORT",
-    );
+    )
+    .optflag(
+                "",
+                "notify-kodi",
+                "Notify Kodi",
+             );
 
     let args: Vec<_> = std::env::args_os()
         .filter_map(|s| match s.into_string() {
@@ -1247,6 +1252,8 @@ fn get_setup() -> Setup {
         }
     };
 
+    let notify_kodi = matches.opt_present("notify-kodi");
+
     let session_config = SessionConfig {
         user_agent: version::VERSION_STRING.to_string(),
         device_id: device_id(&connect_config.name),
@@ -1543,6 +1550,7 @@ fn get_setup() -> Setup {
             normalisation_release_cf,
             normalisation_knee_db,
             ditherer,
+            notify_kodi: notify_kodi,
         }
     };
 
