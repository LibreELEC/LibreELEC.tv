diff --git a/playback/src/player.rs b/playback/src/player.rs
index ab1a8ab..16c75ec 100644
--- a/playback/src/player.rs
+++ b/playback/src/player.rs
@@ -4,7 +4,8 @@ use futures::sync::oneshot;
 use futures::{future, Future};
 use std;
 use std::borrow::Cow;
-use std::io::{Read, Result, Seek, SeekFrom};
+use std::fs::OpenOptions;
+use std::io::{Read, Result, Seek, SeekFrom, Write};
 use std::mem;
 use std::sync::mpsc::{RecvError, RecvTimeoutError, TryRecvError};
 use std::thread;
@@ -20,6 +21,12 @@ use audio_backend::Sink;
 use metadata::{FileFormat, Metadata, Track};
 use mixer::AudioFilter;

+fn fifo(id: &str, track_id: &SpotifyId) {
+    // println!("fifo = {} {}", id, track_id.to_base62());
+    let mut file = OpenOptions::new().write(true).open("/var/run/librespot").unwrap();
+    writeln!(&mut file, "{}\n{}", id, track_id.to_base62()).unwrap();
+}
+
 pub struct Player {
     commands: Option<std::sync::mpsc::Sender<PlayerCommand>>,
     thread_handle: Option<thread::JoinHandle<()>>,
@@ -413,11 +420,17 @@ impl PlayerInternal {
                                 | PlayerState::EndOfTrack {
                                     track_id: old_track_id,
                                     ..
-                                } => self.send_event(PlayerEvent::Changed {
-                                    old_track_id: old_track_id,
-                                    new_track_id: track_id,
-                                }),
-                                _ => self.send_event(PlayerEvent::Started { track_id }),
+                                } => {
+                                    self.send_event(PlayerEvent::Changed {
+                                        old_track_id: old_track_id,
+                                        new_track_id: track_id,
+                                    });
+                                    fifo("1", &track_id)
+                                }
+                                _ => {
+                                    self.send_event(PlayerEvent::Started { track_id });
+                                    fifo("2", &track_id)
+                                }
                             }

                             self.start_sink();
@@ -443,13 +456,17 @@ impl PlayerInternal {
                                 | PlayerState::EndOfTrack {
                                     track_id: old_track_id,
                                     ..
-                                } => self.send_event(PlayerEvent::Changed {
-                                    old_track_id: old_track_id,
-                                    new_track_id: track_id,
-                                }),
+                                } => {
+                                    self.send_event(PlayerEvent::Changed {
+                                        old_track_id: old_track_id,
+                                        new_track_id: track_id,
+                                    });
+                                    fifo("3", &track_id)
+                                }
                                 _ => (),
                             }
                             self.send_event(PlayerEvent::Stopped { track_id });
+                            fifo("4", &track_id)
                         }
                     }

@@ -476,6 +493,7 @@ impl PlayerInternal {

                     self.send_event(PlayerEvent::Started { track_id });
                     self.start_sink();
+                    fifo("5", &track_id)
                 } else {
                     warn!("Player::play called from invalid state");
                 }
@@ -487,6 +505,7 @@ impl PlayerInternal {

                     self.stop_sink_if_running();
                     self.send_event(PlayerEvent::Stopped { track_id });
+                    fifo("6", &track_id)
                 } else {
                     warn!("Player::pause called from invalid state");
                 }
@@ -499,6 +518,7 @@ impl PlayerInternal {
                     self.stop_sink_if_running();
                     self.send_event(PlayerEvent::Stopped { track_id });
                     self.state = PlayerState::Stopped;
+                    fifo("7", &track_id)
                 }
                 PlayerState::Stopped => {
                     warn!("Player::stop called from invalid state");
