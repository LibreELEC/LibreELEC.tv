#!/bin/bash

################################################################################
#      This file is part of OpenELEC - http://www.openelec.tv
#      Copyright (C) 2009-2016 Stephan Raue (stephan@openelec.tv)
#
#  OpenELEC is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 2 of the License, or
#  (at your option) any later version.
#
#  OpenELEC is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with OpenELEC.  If not, see <http://www.gnu.org/licenses/>.
################################################################################

. config/options $1

if [ -z "$1" ]; then
  echo "usage: $0 package_name"
  exit 1
fi

if [ ! -f $PKG_DIR/package.mk ]; then
  printf "$(print_color CLR_ERROR "$1: no package.mk file found")\n"
  exit 1
fi

$SCRIPTS/get $1

STAMP=$PKG_BUILD/.libreelec-unpack

mkdir -p $BUILD

STAMP_DEPENDS="$PKG_DIR $PKG_NEED_UNPACK $PROJECT_DIR/$PROJECT/patches/$PKG_NAME"
[ -n "$DEVICE" ] && STAMP_DEPENDS="$STAMP_DEPENDS $PROJECT_DIR/$PROJECT/devices/$DEVICE/patches/$PKG_NAME"

# Perform a wildcard match on the package to ensure old versions are cleaned too
PKG_DEEPMD5=
GIT_MUST_REBUILD="no"
for i in $BUILD/$1-*; do
  if [ -d $i -a -f "$i/.libreelec-unpack" ] ; then
    . "$i/.libreelec-unpack"
    if [ "$STAMP_PKG_NAME" = "$1" ]; then
      [ -z "${PKG_DEEPMD5}" ] && PKG_DEEPMD5=$(find $STAMP_DEPENDS -exec md5sum {} \; 2>/dev/null | sort | md5sum | cut -d" " -f1)
      if [ ! "$PKG_DEEPMD5" = "$STAMP_PKG_DEEPMD5" ] ; then
        if [ -z "$PKG_GIT_URL" ] ; then
        $SCRIPTS/clean $1
        else
          GIT_MUST_REBUILD="yes"
        fi
      fi
    fi
  fi
done

if [ -d "$PKG_BUILD" -a ! -f "$STAMP" ]; then
  # stale pkg build dir
  $SCRIPTS/clean $1
fi

[ -f "$STAMP" -a "$GIT_MUST_REBUILD" = "no" ] && exit 0

if [ -d "$SOURCES/$1" -o -d "$PKG_DIR/sources" -o -n "$PKG_GIT_URL" ]; then
  printf "%${BUILD_INDENT}c $(print_color CLR_UNPACK "UNPACK")   $1\n" ' '>&$SILENT_OUT
  export BUILD_INDENT=$((${BUILD_INDENT:-1}+$BUILD_INDENT_SIZE))

  # unset functions
  unset -f pre_unpack
  unset -f unpack
  unset -f post_unpack
  unset -f pre_patch
  unset -f post_patch

  . $PKG_DIR/package.mk

  if [ -z "$PKG_GIT_URL" ] ; then

  if [ "$(type -t pre_unpack)" = "function" ]; then
    pre_unpack
  fi

  if [ "$(type -t unpack)" = "function" ]; then
    unpack
  else
    if [ -n "$PKG_URL" ]; then
      $SCRIPTS/extract $1 $BUILD
    fi
  fi

  if [ ! -d $BUILD/$PKG_NAME-$PKG_VERSION ]; then
    if [ -n "$PKG_SOURCE_DIR" ]; then
      mv $BUILD/$PKG_SOURCE_DIR $BUILD/$PKG_NAME-$PKG_VERSION
    elif [ -d $BUILD/$PKG_NAME-$PKG_VERSION* ]; then
      mv $BUILD/$PKG_NAME-$PKG_VERSION* $BUILD/$PKG_NAME-$PKG_VERSION
    fi
  fi

  if [ -d "$PKG_DIR/sources" ]; then
    [ ! -d "$BUILD/${PKG_NAME}-${PKG_VERSION}" ] && mkdir -p $BUILD/${PKG_NAME}-${PKG_VERSION}
    cp -PRf $PKG_DIR/sources/* $BUILD/${PKG_NAME}-${PKG_VERSION}
  fi

  fi

  if [ -z "$PKG_URL" -a -n "$PKG_GIT_URL" ]; then
    # init GIT_ORIG_DIR
    GIT_ORIG_DIR=""
    [ -n "$PKG_GIT_BRANCH" ] && GIT_CLONE_BRANCH="--branch $PKG_GIT_BRANCH" || GIT_CLONE_BRANCH=""
    [ "$PKG_GIT_CLONE_SINGLE" = "yes" ] && GIT_CLONE_SINGLE="--single-branch" || GIT_CLONE_SINGLE=""
    [ -n "$PKG_GIT_SUBMODULE_DEPTH" ] && GIT_SUBMODULE_DEPTH="--depth $PKG_GIT_SUBMODULE_DEPTH" || GIT_SUBMODULE_DEPTH=""
    # cycle through folders that match $PKG_NAME in $BUILD until we find the right one
    for f in $BUILD/$1-*/ ; do
      if [ -d $f ]; then
        if [ -f $f/.libreelec-unpack ]; then
          source $f/.libreelec-unpack
          if [ "$PKG_NAME" = "$STAMP_PKG_NAME" ]; then
            cd $f
            BUILD_GIT_URL=$(git remote get-url origin)
            if [ "$BUILD_GIT_URL" = "$PKG_GIT_URL" ]; then
              # git cloned repository found
              GIT_ORIG_DIR=$f
              break
            fi
          fi
        fi
      fi
    done
    if [ -d "$GIT_ORIG_DIR" -a -n "$GIT_ORIG_DIR" ]; then
      if [ ! "$GIT_ORIG_DIR" = "$BUILD/$PKG_NAME-$PKG_VERSION/" ]; then
        mv $GIT_ORIG_DIR $BUILD/$PKG_NAME-$PKG_VERSION
      fi
      cd $BUILD/$PKG_NAME-$PKG_VERSION
      # clean repository from any local changes and pull
      git clean -fdx
      git checkout -- .
      git pull
    else
      # no valid folder found => clean
      $SCRIPTS/clean $1
      # clone the repository
      git clone $GIT_CLONE_BRANCH $GIT_CLONE_SINGLE $PKG_GIT_URL $BUILD/$PKG_NAME-$PKG_VERSION/
      cd $BUILD/$PKG_NAME-$PKG_VERSION/
    fi
    # switch to desired version and fetch submodules
    git reset --hard $PKG_VERSION
    git submodule update --init --recursive $GIT_SUBMODULE_DEPTH
    # create tar.bz2 archive if not created before
    GIT_ARCHIVE="$SOURCES/$PKG_NAME/$PKG_NAME-$PKG_VERSION.tar.bz2"
    if [ ! -f "$GIT_ARCHIVE" -a "$PKG_GIT_CREATE_ARCHIVE" = "yes" ]; then
      cd $BUILD
      mkdir -p $SOURCES/$PKG_NAME
      GIT_EXCLUDE_TAR=""
      for _e in $(find $PKG_NAME-$PKG_VERSION -name .git) ; do
        GIT_EXCLUDE_TAR="--exclude=$_e $GIT_EXCLUDE_TAR"
      done
      tar $GIT_EXCLUDE_TAR -c $PKG_NAME-$PKG_VERSION | bzip2 > $GIT_ARCHIVE
      echo $(sha256sum $GIT_ARCHIVE | cut -d" " -f1) > $GIT_ARCHIVE.sha256
      echo "git clone $GIT_CLONE_BRANCH $GIT_CLONE_SINGLE $PKG_GIT_URL" > $GIT_ARCHIVE.url
      echo "git reset --hard $PKG_VERSION" >> $GIT_ARCHIVE.url
      echo "git submodule update --init --recursive $GIT_SUBMODULE_DEPTH" >> $GIT_ARCHIVE.url
    fi
    cd $ROOT
  elif [ -z "$PKG_URL" ] ; then
    mkdir -p "${BUILD}/${PKG_NAME}-${PKG_VERSION}"
  fi

  if [ "$(type -t post_unpack)" = "function" ]; then
    post_unpack
  fi

  if [ "$(type -t pre_patch)" = "function" ]; then
    pre_patch
  fi

  if [ "$TARGET_ARCH" = "x86_64" ]; then
    PATCH_ARCH="x86"
  else
    PATCH_ARCH="${TARGET_PATCH_ARCH:-$TARGET_ARCH}"
  fi

  PATCH_DIRS_PKG=""
  PATCH_DIRS_PRJ=""
  if [ -n "$PKG_PATCH_DIRS" ]; then
    for patch_dir in $PKG_PATCH_DIRS; do
      [ -d $PKG_DIR/patches/$patch_dir ] && PATCH_DIRS_PKG="$PATCH_DIRS_PKG $PKG_DIR/patches/$patch_dir/*.patch"
      [ -d $PROJECT_DIR/$PROJECT/patches/$PKG_NAME/$patch_dir ] && PATCH_DIRS_PRJ="$PATCH_DIRS_PRJ $PROJECT_DIR/$PROJECT/patches/$PKG_NAME/$patch_dir/*.patch"
      [ -d $PROJECT_DIR/$PROJECT/devices/$DEVICE/patches/$PKG_NAME/$patch_dir ] && PATCH_DIRS_PRJ="$PATCH_DIRS_PRJ $PROJECT_DIR/$PROJECT/devices/$DEVICE/patches/$PKG_NAME/$patch_dir/*.patch"
    done
  fi

  for i in $PKG_DIR/patches/*.patch \
           $PKG_DIR/patches/$PATCH_ARCH/*.patch \
           $PATCH_DIRS_PKG \
           $PKG_DIR/patches/$PKG_VERSION/*.patch \
           $PKG_DIR/patches/$PKG_VERSION/$PATCH_ARCH/*.patch \
           $PROJECT_DIR/$PROJECT/patches/$PKG_NAME/*.patch \
           $PROJECT_DIR/$PROJECT/patches/$PKG_NAME/$PATCH_ARCH/*.patch \
           $PATCH_DIRS_PRJ \
           $PROJECT_DIR/$PROJECT/patches/$PKG_NAME/$PKG_VERSION/*.patch \
           $PROJECT_DIR/$PROJECT/devices/$DEVICE/patches/$PKG_NAME/*.patch; do

    thisdir="$(dirname "$i")"

    if [ "$thisdir" = "$PKG_DIR/patches" ]; then
      PATCH_DESC="(common)"
    elif [ "$thisdir" = "$PKG_DIR/patches/$PATCH_ARCH" ]; then
      PATCH_DESC="(common - $PATCH_ARCH)"
    elif [ "$thisdir" = "$PKG_DIR/patches/$PKG_VERSION" ]; then
      PATCH_DESC="(common - $PKG_VERSION)"
    elif [ "$thisdir" = "$PKG_DIR/patches/$PKG_VERSION/$PATCH_ARCH" ]; then
      PATCH_DESC="($PKG_VERSION - $PATCH_ARCH)"
    elif [ "$thisdir" = "$PROJECT_DIR/$PROJECT/patches/$PKG_NAME" ]; then
      PATCH_DESC="(project)"
    elif [ "$thisdir" = "$PROJECT_DIR/$PROJECT/patches/$PKG_NAME/$PATCH_ARCH" ]; then
      PATCH_DESC="(project - $PATCH_ARCH)"
    elif [ "$thisdir" = "$PROJECT_DIR/$PROJECT/patches/$PKG_NAME/$PKG_VERSION" ]; then
      PATCH_DESC="(project - $PKG_VERSION)"
    elif [ "$thisdir" = "$PROJECT_DIR/$PROJECT/devices/$DEVICE/patches/$PKG_NAME" ]; then
      PATCH_DESC="(device)"
    else
      if [[ "$thisdir" =~ ^$PKG_DIR/.* ]]; then
        PATCH_DESC="(common - $(basename "$thisdir"))"
      elif [[ "$thisdir" =~ ^$PROJECT_DIR/.*/devices/.* ]]; then
        PATCH_DESC="(device - $(basename "$thisdir"))"
      elif [[ "$thisdir" =~ ^$PROJECT_DIR/.* ]]; then
        PATCH_DESC="(project - $(basename "$thisdir"))"
      else
        PATCH_DESC="(unknown - $(basename "$thisdir"))"
      fi
    fi

    if [ -f "$i" ]; then
      printf "%${BUILD_INDENT}c $(print_color CLR_APPLY_PATCH "APPLY PATCH") $(print_color CLR_PATCH_DESC "${PATCH_DESC}")   ${i#$ROOT/}\n" ' '>&$SILENT_OUT
      if grep -qE '^GIT binary patch$|^rename from|^rename to' $i; then
        cat $i | git apply --directory=`echo "$PKG_BUILD" | cut -f1 -d\ ` -p1 --verbose --whitespace=nowarn --unsafe-paths >&$VERBOSE_OUT
      else
        cat $i | patch -d `echo "$PKG_BUILD" | cut -f1 -d\ ` -p1 >&$VERBOSE_OUT
      fi
    fi
  done

  if [ "$(type -t post_patch)" = "function" ]; then
    post_patch
  fi

  if [ ! "$PKG_NAME" == "configtools" ] ; then
    for config in `find $PKG_BUILD -name config.guess | sed 's/config.guess//'`; do
      printf "%${BUILD_INDENT}c $(print_color CLR_FIXCONFIG "FIXCONFIG")   $config\n" ' '

      [ -f "$config/config.guess" -a -f $TOOLCHAIN/configtools/config.guess ] && \
        cp -f $TOOLCHAIN/configtools/config.guess $config
      [ -f "$config/config.sub" -a -f $TOOLCHAIN/configtools/config.sub ] && \
        cp -f $TOOLCHAIN/configtools/config.sub $config
    done
  fi
fi

if [ "$PKG_SECTION" != "virtual" ]; then
  mkdir -p $PKG_BUILD

  rm -f $STAMPS/$1/build_*

  PKG_DEEPMD5=$(find $STAMP_DEPENDS -exec md5sum {} \; 2>/dev/null | sort | md5sum | cut -d" " -f1)
  for i in PKG_NAME PKG_DEEPMD5; do
    echo "STAMP_$i=\"${!i}\"" >> $STAMP
  done
fi
