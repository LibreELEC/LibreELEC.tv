# Do not build as root. Ever.
if [[ "${EUID}" -eq 0 ]]; then
  echo "Building as the root user is NOT supported. Use a regular user account for the build." 1>&2
  exit 1
fi

# Spaces in paths are verboten
if [[ ${PWD} =~ [[:space:]] ]]; then
  echo "Current PWD: \"${PWD}\"" 1>&2
  echo 1>&2
  echo "Building in a folder that includes spaces is NOT supported. Use a folder without spaces." 1>&2
  exit 1
fi

# set default language for buildsystem
export LC_ALL=C

# include required variables
. config/required_options

# include helper functions
. config/functions

# read DISTRO version information
. "${DISTRO_DIR}/${DISTRO}/version" || die "\nERROR: No distro version present\n"

if [ ! -f "${ROOT}/${DISTRO}-${PROJECT}-${DEVICE}-${TARGET_ARCH}.config" ]; then
  ${ROOT}/scripts/make_config olddefconfig
fi

. "${ROOT}/${DISTRO}-${PROJECT}-${DEVICE}-${TARGET_ARCH}.config"

# read architecture defaults  
if [ -f "config/arch.${TARGET_ARCH}" ]; then
  . "config/arch.${TARGET_ARCH}"
fi

if [ -n "${FIRMWARE_DEVICE}" ]; then
  FIRMWARE="${FIRMWARE} ${FIRMWARE_DEVICE}"
fi

if [ -n "${ADDITIONAL_DRIVERS_PROJECT}" ]; then
  ADDITIONAL_DRIVERS="${ADDITIONAL_DRIVERS} ${ADDITIONAL_DRIVERS_PROJECT}"
fi

LINUX_DEPENDS="${PROJECT_DIR}/${PROJECT}/linux ${PROJECT_DIR}/${PROJECT}/patches/linux ${PROJECT_DIR}/${PROJECT}/packages/linux ${ROOT}/packages/linux"
[ -n "${DEVICE}" ] && LINUX_DEPENDS+=" ${PROJECT_DIR}/${PROJECT}/devices/${DEVICE}/linux ${PROJECT_DIR}/${PROJECT}/devices/${DEVICE}/patches/linux ${PROJECT_DIR}/${PROJECT}/devices/${DEVICE}/packages/linux"

# Concurrency make level (-j option)
#  Try values between 1 and number of processor cores present.
#  default: use all cores
[ -z "${CONCURRENCY_MAKE_LEVEL}" ] && export CONCURRENCY_MAKE_LEVEL=$(nproc)
[ -z "${CONCURRENCY_LOAD}" ] && export CONCURRENCY_LOAD=$(python3 -c "import os; print(f'{os.cpu_count() * 1.5:.2f}')")

# set addon paths
if [ -z "$ADDON_PATH" ]; then
  if [ -n "$ADDON_PROJECT" ]; then
    ADDON_PATH="$ADDON_VERSION/$ADDON_PROJECT/$TARGET_ARCH"
  else
    ADDON_PATH="$ADDON_VERSION/$TARGET_ARCH"
  fi
fi
if [ -z "$ADDON_URL" ]; then
  ADDON_URL="$ADDON_SERVER_URL/$ADDON_PATH"
fi

# overwrite OEM_SUPPORT via commandline
if [ "${OEM}" = "yes" -o "${OEM}" = "no" ]; then
  OEM_SUPPORT="${OEM}"
fi

if [ -z "${LOCAL_CC}" ]; then
  die "***** Please install gcc - run scripts/checkdeps *****" "127"
fi

# Need to point to your actual g++
# If you have ccache installed, take care that LOCAL_CXX does not point to it
[ -z "${LOCAL_CXX}" ] && export LOCAL_CXX="$(command -v g++)"

check_config

. config/graphic
. config/path $1

## package processing

# If the package caches are unset, then populate them
init_package_cache

if [ -z "${DEFAULT_PYTHON_VERSION+set}" ]; then
  export DEFAULT_PYTHON_VERSION="$(get_pkg_variable Python3 PKG_PYTHON_VERSION)"
fi

# set package metadata
source_package "${1}"
