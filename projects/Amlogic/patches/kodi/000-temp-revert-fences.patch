From 4a847d08a1488dd07b1a2a9b42278688c37f0056 Mon Sep 17 00:00:00 2001
From: Matthias Reichl <hias@horus.com>
Date: Mon, 6 Oct 2025 16:23:48 +0200
Subject: [PATCH 1/6] Revert "CDRMAtomic: expose fencing support via virtual
 methods instead of dynamic cast"

This reverts commit 46ac8dcae3b06ca0727cc746d30b68b1184e61ec.
---
 xbmc/windowing/gbm/WinSystemGbmEGLContext.cpp | 5 +++--
 xbmc/windowing/gbm/drm/DRMAtomic.h            | 1 -
 xbmc/windowing/gbm/drm/DRMUtils.h             | 1 -
 3 files changed, 3 insertions(+), 4 deletions(-)

diff --git a/xbmc/windowing/gbm/WinSystemGbmEGLContext.cpp b/xbmc/windowing/gbm/WinSystemGbmEGLContext.cpp
index a2fc6b21dd2f..4806cd0909f7 100644
--- a/xbmc/windowing/gbm/WinSystemGbmEGLContext.cpp
+++ b/xbmc/windowing/gbm/WinSystemGbmEGLContext.cpp
@@ -11,6 +11,7 @@
 #include "OptionalsReg.h"
 #include "cores/VideoPlayer/DVDCodecs/DVDFactoryCodec.h"
 #include "cores/VideoPlayer/VideoRenderers/RenderFactory.h"
+#include "drm/DRMAtomic.h"
 #include "utils/log.h"
 
 using namespace KODI::WINDOWING::GBM;
@@ -61,14 +62,14 @@ bool CWinSystemGbmEGLContext::InitWindowSystemEGL(EGLint renderableType, EGLint
   if (CEGLUtils::HasExtension(m_eglContext.GetEGLDisplay(), "EGL_ANDROID_native_fence_sync") &&
       CEGLUtils::HasExtension(m_eglContext.GetEGLDisplay(), "EGL_KHR_fence_sync"))
   {
-    if (m_DRM->SupportsFencing())
+    if (std::dynamic_pointer_cast<CDRMAtomic>(m_DRM))
     {
       m_eglFence = std::make_unique<KODI::UTILS::EGL::CEGLFence>(m_eglContext.GetEGLDisplay());
     }
     else
     {
       CLog::Log(LOGWARNING, "[GBM] EGL_KHR_fence_sync and EGL_ANDROID_native_fence_sync supported"
-                            ", but DRM backend doesn't support fencing");
+                            ", but atomic DRM not initialized");
     }
   }
   else
diff --git a/xbmc/windowing/gbm/drm/DRMAtomic.h b/xbmc/windowing/gbm/drm/DRMAtomic.h
index 2c262fd3028b..9107bde884d3 100644
--- a/xbmc/windowing/gbm/drm/DRMAtomic.h
+++ b/xbmc/windowing/gbm/drm/DRMAtomic.h
@@ -32,7 +32,6 @@ public:
   bool SetActive(bool active) override;
   bool InitDrm() override;
   void DestroyDrm() override;
-  bool SupportsFencing() override { return true; }
   bool AddProperty(CDRMObject* object, const char* name, uint64_t value);
 
 private:
diff --git a/xbmc/windowing/gbm/drm/DRMUtils.h b/xbmc/windowing/gbm/drm/DRMUtils.h
index f2eaaf7f2a2e..6df248104b14 100644
--- a/xbmc/windowing/gbm/drm/DRMUtils.h
+++ b/xbmc/windowing/gbm/drm/DRMUtils.h
@@ -45,7 +45,6 @@ public:
   virtual bool SetActive(bool active) { return false; }
   virtual bool InitDrm();
   virtual void DestroyDrm();
-  virtual bool SupportsFencing() { return false; }
 
   int GetFileDescriptor() const { return m_fd; }
   int GetRenderNodeFileDescriptor() const { return m_renderFd; }
-- 
2.47.3


From f6f0d55744ab99c0470ef3b143ed8a1a72bf2d7b Mon Sep 17 00:00:00 2001
From: Matthias Reichl <hias@horus.com>
Date: Mon, 6 Oct 2025 16:23:58 +0200
Subject: [PATCH 2/6] Revert "CDRMAtomic: don't create egl fence unless atomic
 drm init was succesful"

This reverts commit 24c9baff0d409df504c1838d5c5c8ba6ac57a1a5.
---
 xbmc/windowing/gbm/WinSystemGbmEGLContext.cpp | 11 +----------
 1 file changed, 1 insertion(+), 10 deletions(-)

diff --git a/xbmc/windowing/gbm/WinSystemGbmEGLContext.cpp b/xbmc/windowing/gbm/WinSystemGbmEGLContext.cpp
index 4806cd0909f7..ae015d225252 100644
--- a/xbmc/windowing/gbm/WinSystemGbmEGLContext.cpp
+++ b/xbmc/windowing/gbm/WinSystemGbmEGLContext.cpp
@@ -11,7 +11,6 @@
 #include "OptionalsReg.h"
 #include "cores/VideoPlayer/DVDCodecs/DVDFactoryCodec.h"
 #include "cores/VideoPlayer/VideoRenderers/RenderFactory.h"
-#include "drm/DRMAtomic.h"
 #include "utils/log.h"
 
 using namespace KODI::WINDOWING::GBM;
@@ -62,15 +61,7 @@ bool CWinSystemGbmEGLContext::InitWindowSystemEGL(EGLint renderableType, EGLint
   if (CEGLUtils::HasExtension(m_eglContext.GetEGLDisplay(), "EGL_ANDROID_native_fence_sync") &&
       CEGLUtils::HasExtension(m_eglContext.GetEGLDisplay(), "EGL_KHR_fence_sync"))
   {
-    if (std::dynamic_pointer_cast<CDRMAtomic>(m_DRM))
-    {
-      m_eglFence = std::make_unique<KODI::UTILS::EGL::CEGLFence>(m_eglContext.GetEGLDisplay());
-    }
-    else
-    {
-      CLog::Log(LOGWARNING, "[GBM] EGL_KHR_fence_sync and EGL_ANDROID_native_fence_sync supported"
-                            ", but atomic DRM not initialized");
-    }
+    m_eglFence = std::make_unique<KODI::UTILS::EGL::CEGLFence>(m_eglContext.GetEGLDisplay());
   }
   else
   {
-- 
2.47.3


From ff797f1a0c813177de2ef96d34ea8250cd13e92b Mon Sep 17 00:00:00 2001
From: Matthias Reichl <hias@horus.com>
Date: Fri, 25 Oct 2024 16:19:44 +0200
Subject: [PATCH 3/6] Revert "CEGLFence: Ignore improper atomic drmrequest when
 async rendering and"

This reverts commit 54b9ccdb4fd8c6397846cd35887292dbb31cf3b1.
---
 xbmc/utils/EGLFence.cpp | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

diff --git a/xbmc/utils/EGLFence.cpp b/xbmc/utils/EGLFence.cpp
index 58a9ec1683be..9d0065bdaf07 100644
--- a/xbmc/utils/EGLFence.cpp
+++ b/xbmc/utils/EGLFence.cpp
@@ -133,7 +133,11 @@ void CEGLFence::WaitSyncCPU()
   if (!m_kmsFence)
     return;
 
-  if (m_eglClientWaitSyncKHR(m_display, m_kmsFence, 0, EGL_FOREVER_KHR) != EGL_FALSE)
-    m_eglDestroySyncKHR(m_display, m_kmsFence);
+  EGLint status{EGL_FALSE};
+
+  while (status != EGL_CONDITION_SATISFIED_KHR)
+    status = m_eglClientWaitSyncKHR(m_display, m_kmsFence, 0, EGL_FOREVER_KHR);
+
+  m_eglDestroySyncKHR(m_display, m_kmsFence);
 }
 #endif
-- 
2.47.3


From f191432d150dd8a5355b6263772542953aa3f604 Mon Sep 17 00:00:00 2001
From: Matthias Reichl <hias@horus.com>
Date: Fri, 25 Oct 2024 16:20:19 +0200
Subject: [PATCH 4/6] Revert "CDRMAtomic: Backlog only the last known good
 drmrequest"

This reverts commit 6c49df769b7a21a3857b25ea12dc8ba0302051aa.
---
 xbmc/windowing/gbm/drm/DRMAtomic.cpp | 8 +++-----
 1 file changed, 3 insertions(+), 5 deletions(-)

diff --git a/xbmc/windowing/gbm/drm/DRMAtomic.cpp b/xbmc/windowing/gbm/drm/DRMAtomic.cpp
index 73f9cd13db70..740034c36e4c 100644
--- a/xbmc/windowing/gbm/drm/DRMAtomic.cpp
+++ b/xbmc/windowing/gbm/drm/DRMAtomic.cpp
@@ -102,11 +102,6 @@ void CDRMAtomic::DrmAtomicCommit(int fb_id, int flags, bool rendered, bool video
   if (ret < 0)
   {
     CLog::Log(LOGERROR, "CDRMAtomic::{} - atomic commit failed: {}", __FUNCTION__, strerror(errno));
-    m_atomicRequestQueue.pop_back();
-  }
-  else if (m_atomicRequestQueue.size() > 1)
-  {
-    m_atomicRequestQueue.pop_front();
   }
 
   if (m_inFenceFd != -1)
@@ -122,6 +117,9 @@ void CDRMAtomic::DrmAtomicCommit(int fb_id, int flags, bool rendered, bool video
                 strerror(errno));
   }
 
+  if (m_atomicRequestQueue.size() > 1)
+    m_atomicRequestQueue.pop_back();
+
   m_atomicRequestQueue.emplace_back(std::make_unique<CDRMAtomicRequest>());
   m_req = m_atomicRequestQueue.back().get();
 }
-- 
2.47.3


From 5cb18c57832dafe491bdc269053b8a0601ad9fc2 Mon Sep 17 00:00:00 2001
From: Matthias Reichl <hias@horus.com>
Date: Fri, 25 Oct 2024 16:27:00 +0200
Subject: [PATCH 5/6] Revert "CDRMAtomic: add support for using
 DRM_MODE_ATOMIC_NONBLOCK"

This reverts commit e9710033029d86efa0c18a6121d2c6376f74ef10.
---
 xbmc/windowing/gbm/WinSystemGbm.cpp           |  8 +++---
 xbmc/windowing/gbm/WinSystemGbm.h             |  2 +-
 xbmc/windowing/gbm/WinSystemGbmEGLContext.cpp | 11 --------
 xbmc/windowing/gbm/WinSystemGbmEGLContext.h   |  3 ---
 xbmc/windowing/gbm/WinSystemGbmGLContext.cpp  | 26 +-----------------
 .../windowing/gbm/WinSystemGbmGLESContext.cpp | 27 +------------------
 xbmc/windowing/gbm/drm/DRMAtomic.cpp          | 19 +++----------
 xbmc/windowing/gbm/drm/DRMAtomic.h            |  2 +-
 xbmc/windowing/gbm/drm/DRMLegacy.cpp          |  2 +-
 xbmc/windowing/gbm/drm/DRMLegacy.h            |  2 +-
 xbmc/windowing/gbm/drm/DRMUtils.h             | 13 +--------
 xbmc/windowing/gbm/drm/OffScreenModeSetting.h |  2 +-
 12 files changed, 15 insertions(+), 102 deletions(-)

diff --git a/xbmc/windowing/gbm/WinSystemGbm.cpp b/xbmc/windowing/gbm/WinSystemGbm.cpp
index 6ebabf8e3646..3cd60f6bad88 100644
--- a/xbmc/windowing/gbm/WinSystemGbm.cpp
+++ b/xbmc/windowing/gbm/WinSystemGbm.cpp
@@ -254,7 +254,7 @@ bool CWinSystemGbm::SetFullScreen(bool fullScreen, RESOLUTION_INFO& res, bool bl
   return result;
 }
 
-void CWinSystemGbm::FlipPage(bool rendered, bool videoLayer, bool async)
+void CWinSystemGbm::FlipPage(bool rendered, bool videoLayer)
 {
   if (m_videoLayerBridge && !videoLayer)
   {
@@ -269,7 +269,7 @@ void CWinSystemGbm::FlipPage(bool rendered, bool videoLayer, bool async)
     bo = m_GBM->GetDevice().GetSurface().LockFrontBuffer().Get();
   }
 
-  m_DRM->FlipPage(bo, rendered, videoLayer, async);
+  m_DRM->FlipPage(bo, rendered, videoLayer);
 
   if (m_videoLayerBridge && !videoLayer)
   {
@@ -287,14 +287,14 @@ bool CWinSystemGbm::UseLimitedColor()
 bool CWinSystemGbm::Hide()
 {
   bool ret = m_DRM->SetActive(false);
-  FlipPage(false, false, false);
+  FlipPage(false, false);
   return ret;
 }
 
 bool CWinSystemGbm::Show(bool raise)
 {
   bool ret = m_DRM->SetActive(true);
-  FlipPage(false, false, false);
+  FlipPage(false, false);
   return ret;
 }
 
diff --git a/xbmc/windowing/gbm/WinSystemGbm.h b/xbmc/windowing/gbm/WinSystemGbm.h
index 0223d0f9688c..5576d79140d6 100644
--- a/xbmc/windowing/gbm/WinSystemGbm.h
+++ b/xbmc/windowing/gbm/WinSystemGbm.h
@@ -47,7 +47,7 @@ public:
   bool ResizeWindow(int newWidth, int newHeight, int newLeft, int newTop) override;
   bool SetFullScreen(bool fullScreen, RESOLUTION_INFO& res, bool blankOtherDisplays) override;
 
-  void FlipPage(bool rendered, bool videoLayer, bool async);
+  void FlipPage(bool rendered, bool videoLayer);
 
   bool CanDoWindowed() override { return false; }
   void UpdateResolutions() override;
diff --git a/xbmc/windowing/gbm/WinSystemGbmEGLContext.cpp b/xbmc/windowing/gbm/WinSystemGbmEGLContext.cpp
index ae015d225252..83509f94c8ef 100644
--- a/xbmc/windowing/gbm/WinSystemGbmEGLContext.cpp
+++ b/xbmc/windowing/gbm/WinSystemGbmEGLContext.cpp
@@ -58,17 +58,6 @@ bool CWinSystemGbmEGLContext::InitWindowSystemEGL(EGLint renderableType, EGLint
     return false;
   }
 
-  if (CEGLUtils::HasExtension(m_eglContext.GetEGLDisplay(), "EGL_ANDROID_native_fence_sync") &&
-      CEGLUtils::HasExtension(m_eglContext.GetEGLDisplay(), "EGL_KHR_fence_sync"))
-  {
-    m_eglFence = std::make_unique<KODI::UTILS::EGL::CEGLFence>(m_eglContext.GetEGLDisplay());
-  }
-  else
-  {
-    CLog::Log(LOGWARNING, "[GBM] missing support for EGL_KHR_fence_sync and "
-                          "EGL_ANDROID_native_fence_sync - performance may be impacted");
-  }
-
   return true;
 }
 
diff --git a/xbmc/windowing/gbm/WinSystemGbmEGLContext.h b/xbmc/windowing/gbm/WinSystemGbmEGLContext.h
index 387beb210a20..5c2b5a34aebf 100644
--- a/xbmc/windowing/gbm/WinSystemGbmEGLContext.h
+++ b/xbmc/windowing/gbm/WinSystemGbmEGLContext.h
@@ -9,7 +9,6 @@
 #pragma once
 
 #include "WinSystemGbm.h"
-#include "utils/EGLFence.h"
 #include "utils/EGLUtils.h"
 #include "windowing/linux/WinSystemEGL.h"
 
@@ -55,8 +54,6 @@ protected:
   bool InitWindowSystemEGL(EGLint renderableType, EGLint apiType);
   virtual bool CreateContext() = 0;
 
-  std::unique_ptr<KODI::UTILS::EGL::CEGLFence> m_eglFence;
-
   struct delete_CVaapiProxy
   {
     void operator()(CVaapiProxy* p) const;
diff --git a/xbmc/windowing/gbm/WinSystemGbmGLContext.cpp b/xbmc/windowing/gbm/WinSystemGbmGLContext.cpp
index 65878a7e221d..063b6a213bd4 100644
--- a/xbmc/windowing/gbm/WinSystemGbmGLContext.cpp
+++ b/xbmc/windowing/gbm/WinSystemGbmGLContext.cpp
@@ -121,37 +121,13 @@ void CWinSystemGbmGLContext::PresentRender(bool rendered, bool videoLayer)
   {
     if (rendered)
     {
-#if defined(EGL_ANDROID_native_fence_sync) && defined(EGL_KHR_fence_sync)
-      if (m_eglFence)
-      {
-        int fd = m_DRM->TakeOutFenceFd();
-        if (fd != -1)
-        {
-          m_eglFence->CreateKMSFence(fd);
-          m_eglFence->WaitSyncGPU();
-        }
-
-        m_eglFence->CreateGPUFence();
-      }
-#endif
-
       if (!m_eglContext.TrySwapBuffers())
       {
         CEGLUtils::Log(LOGERROR, "eglSwapBuffers failed");
         throw std::runtime_error("eglSwapBuffers failed");
       }
-
-#if defined(EGL_ANDROID_native_fence_sync) && defined(EGL_KHR_fence_sync)
-      if (m_eglFence)
-      {
-        int fd = m_eglFence->FlushFence();
-        m_DRM->SetInFenceFd(fd);
-
-        m_eglFence->WaitSyncCPU();
-      }
-#endif
     }
-    CWinSystemGbm::FlipPage(rendered, videoLayer, static_cast<bool>(m_eglFence));
+    CWinSystemGbm::FlipPage(rendered, videoLayer);
 
     if (m_dispReset && m_dispResetTimer.IsTimePast())
     {
diff --git a/xbmc/windowing/gbm/WinSystemGbmGLESContext.cpp b/xbmc/windowing/gbm/WinSystemGbmGLESContext.cpp
index 7538a6a69473..f26d0f9c5d32 100644
--- a/xbmc/windowing/gbm/WinSystemGbmGLESContext.cpp
+++ b/xbmc/windowing/gbm/WinSystemGbmGLESContext.cpp
@@ -130,38 +130,13 @@ void CWinSystemGbmGLESContext::PresentRender(bool rendered, bool videoLayer)
   {
     if (rendered)
     {
-#if defined(EGL_ANDROID_native_fence_sync) && defined(EGL_KHR_fence_sync)
-      if (m_eglFence)
-      {
-        int fd = m_DRM->TakeOutFenceFd();
-        if (fd != -1)
-        {
-          m_eglFence->CreateKMSFence(fd);
-          m_eglFence->WaitSyncGPU();
-        }
-
-        m_eglFence->CreateGPUFence();
-      }
-#endif
-
       if (!m_eglContext.TrySwapBuffers())
       {
         CEGLUtils::Log(LOGERROR, "eglSwapBuffers failed");
         throw std::runtime_error("eglSwapBuffers failed");
       }
-
-#if defined(EGL_ANDROID_native_fence_sync) && defined(EGL_KHR_fence_sync)
-      if (m_eglFence)
-      {
-        int fd = m_eglFence->FlushFence();
-        m_DRM->SetInFenceFd(fd);
-
-        m_eglFence->WaitSyncCPU();
-      }
-#endif
     }
-
-    CWinSystemGbm::FlipPage(rendered, videoLayer, static_cast<bool>(m_eglFence));
+    CWinSystemGbm::FlipPage(rendered, videoLayer);
 
     if (m_dispReset && m_dispResetTimer.IsTimePast())
     {
diff --git a/xbmc/windowing/gbm/drm/DRMAtomic.cpp b/xbmc/windowing/gbm/drm/DRMAtomic.cpp
index 740034c36e4c..371111dd291d 100644
--- a/xbmc/windowing/gbm/drm/DRMAtomic.cpp
+++ b/xbmc/windowing/gbm/drm/DRMAtomic.cpp
@@ -65,11 +65,6 @@ void CDRMAtomic::DrmAtomicCommit(int fb_id, int flags, bool rendered, bool video
     AddProperty(m_gui_plane, "CRTC_W", m_mode->hdisplay);
     AddProperty(m_gui_plane, "CRTC_H", m_mode->vdisplay);
 
-    if (m_inFenceFd != -1)
-    {
-      AddProperty(m_crtc, "OUT_FENCE_PTR", reinterpret_cast<uint64_t>(&m_outFenceFd));
-      AddProperty(m_gui_plane, "IN_FENCE_FD", m_inFenceFd);
-    }
   }
   else if (videoLayer && !CServiceBroker::GetGUI()->GetWindowManager().HasVisibleControls())
   {
@@ -104,12 +99,6 @@ void CDRMAtomic::DrmAtomicCommit(int fb_id, int flags, bool rendered, bool video
     CLog::Log(LOGERROR, "CDRMAtomic::{} - atomic commit failed: {}", __FUNCTION__, strerror(errno));
   }
 
-  if (m_inFenceFd != -1)
-  {
-    close(m_inFenceFd);
-    m_inFenceFd = -1;
-  }
-
   if (flags & DRM_MODE_ATOMIC_ALLOW_MODESET)
   {
     if (drmModeDestroyPropertyBlob(m_fd, blob_id) != 0)
@@ -124,10 +113,9 @@ void CDRMAtomic::DrmAtomicCommit(int fb_id, int flags, bool rendered, bool video
   m_req = m_atomicRequestQueue.back().get();
 }
 
-void CDRMAtomic::FlipPage(struct gbm_bo* bo, bool rendered, bool videoLayer, bool async)
+void CDRMAtomic::FlipPage(struct gbm_bo* bo, bool rendered, bool videoLayer)
 {
   struct drm_fb* drm_fb = nullptr;
-  uint32_t flags = 0;
 
   if (rendered)
   {
@@ -142,11 +130,10 @@ void CDRMAtomic::FlipPage(struct gbm_bo* bo, bool rendered, bool videoLayer, boo
       CLog::Log(LOGERROR, "CDRMAtomic::{} - Failed to get a new FBO", __FUNCTION__);
       return;
     }
-
-    if (async && !m_need_modeset)
-      flags |= DRM_MODE_ATOMIC_NONBLOCK;
   }
 
+  uint32_t flags = 0;
+
   if (m_need_modeset)
   {
     flags |= DRM_MODE_ATOMIC_ALLOW_MODESET;
diff --git a/xbmc/windowing/gbm/drm/DRMAtomic.h b/xbmc/windowing/gbm/drm/DRMAtomic.h
index 9107bde884d3..a99bdeb9a394 100644
--- a/xbmc/windowing/gbm/drm/DRMAtomic.h
+++ b/xbmc/windowing/gbm/drm/DRMAtomic.h
@@ -27,7 +27,7 @@ class CDRMAtomic : public CDRMUtils
 public:
   CDRMAtomic() = default;
   ~CDRMAtomic() override = default;
-  void FlipPage(struct gbm_bo* bo, bool rendered, bool videoLayer, bool async) override;
+  void FlipPage(struct gbm_bo* bo, bool rendered, bool videoLayer) override;
   bool SetVideoMode(const RESOLUTION_INFO& res, struct gbm_bo* bo) override;
   bool SetActive(bool active) override;
   bool InitDrm() override;
diff --git a/xbmc/windowing/gbm/drm/DRMLegacy.cpp b/xbmc/windowing/gbm/drm/DRMLegacy.cpp
index 9b2b052ff40a..d3c196fc5007 100644
--- a/xbmc/windowing/gbm/drm/DRMLegacy.cpp
+++ b/xbmc/windowing/gbm/drm/DRMLegacy.cpp
@@ -107,7 +107,7 @@ bool CDRMLegacy::QueueFlip(struct gbm_bo* bo)
   return true;
 }
 
-void CDRMLegacy::FlipPage(struct gbm_bo* bo, bool rendered, bool videoLayer, bool async)
+void CDRMLegacy::FlipPage(struct gbm_bo* bo, bool rendered, bool videoLayer)
 {
   if (rendered || videoLayer)
   {
diff --git a/xbmc/windowing/gbm/drm/DRMLegacy.h b/xbmc/windowing/gbm/drm/DRMLegacy.h
index 322a99bed8f7..4e7d1b03addf 100644
--- a/xbmc/windowing/gbm/drm/DRMLegacy.h
+++ b/xbmc/windowing/gbm/drm/DRMLegacy.h
@@ -22,7 +22,7 @@ class CDRMLegacy : public CDRMUtils
 public:
   CDRMLegacy() = default;
   ~CDRMLegacy() override = default;
-  void FlipPage(struct gbm_bo* bo, bool rendered, bool videoLayer, bool async) override;
+  void FlipPage(struct gbm_bo* bo, bool rendered, bool videoLayer) override;
   bool SetVideoMode(const RESOLUTION_INFO& res, struct gbm_bo* bo) override;
   bool SetActive(bool active) override;
   bool InitDrm() override;
diff --git a/xbmc/windowing/gbm/drm/DRMUtils.h b/xbmc/windowing/gbm/drm/DRMUtils.h
index 6df248104b14..315beb5932aa 100644
--- a/xbmc/windowing/gbm/drm/DRMUtils.h
+++ b/xbmc/windowing/gbm/drm/DRMUtils.h
@@ -15,7 +15,6 @@
 #include "windowing/Resolution.h"
 #include "windowing/gbm/GBMUtils.h"
 
-#include <utility>
 #include <vector>
 
 #include <gbm.h>
@@ -40,7 +39,7 @@ class CDRMUtils
 public:
   CDRMUtils() = default;
   virtual ~CDRMUtils();
-  virtual void FlipPage(struct gbm_bo* bo, bool rendered, bool videoLayer, bool async) {}
+  virtual void FlipPage(struct gbm_bo* bo, bool rendered, bool videoLayer) {}
   virtual bool SetVideoMode(const RESOLUTION_INFO& res, struct gbm_bo* bo) { return false; }
   virtual bool SetActive(bool active) { return false; }
   virtual bool InitDrm();
@@ -63,13 +62,6 @@ public:
   static uint32_t FourCCWithAlpha(uint32_t fourcc);
   static uint32_t FourCCWithoutAlpha(uint32_t fourcc);
 
-  void SetInFenceFd(int fd) { m_inFenceFd = fd; }
-  int TakeOutFenceFd()
-  {
-    int fd{-1};
-    return std::exchange(m_outFenceFd, fd);
-  }
-
 protected:
   bool OpenDrm(bool needConnector);
   drm_fb* DrmFbGetFromBo(struct gbm_bo* bo);
@@ -86,9 +78,6 @@ protected:
   int m_width = 0;
   int m_height = 0;
 
-  int m_inFenceFd{-1};
-  int m_outFenceFd{-1};
-
   std::vector<std::unique_ptr<CDRMPlane>> m_planes;
 
 private:
diff --git a/xbmc/windowing/gbm/drm/OffScreenModeSetting.h b/xbmc/windowing/gbm/drm/OffScreenModeSetting.h
index aea436f867b4..606935cc021f 100644
--- a/xbmc/windowing/gbm/drm/OffScreenModeSetting.h
+++ b/xbmc/windowing/gbm/drm/OffScreenModeSetting.h
@@ -22,7 +22,7 @@ class COffScreenModeSetting : public CDRMUtils
 public:
   COffScreenModeSetting() = default;
   ~COffScreenModeSetting() override = default;
-  void FlipPage(struct gbm_bo* bo, bool rendered, bool videoLayer, bool async) override {}
+  void FlipPage(struct gbm_bo* bo, bool rendered, bool videoLayer) override {}
   bool SetVideoMode(const RESOLUTION_INFO& res, struct gbm_bo* bo) override { return false; }
   bool SetActive(bool active) override { return false; }
   bool InitDrm() override;
-- 
2.47.3


From 23d5ea7da51a268e3ca37dbf60c3ae89e569b1e7 Mon Sep 17 00:00:00 2001
From: Matthias Reichl <hias@horus.com>
Date: Fri, 25 Oct 2024 16:27:09 +0200
Subject: [PATCH 6/6] Revert "CEGLFence: add support for using
 EGL_KHR_fence_sync and EGL_ANDROID_native_fence_sync"

This reverts commit ba17e5b45c5bd36ef65089f35049da82a290bb01.
---
 xbmc/utils/EGLFence.cpp | 70 -----------------------------------------
 xbmc/utils/EGLFence.h   | 19 -----------
 2 files changed, 89 deletions(-)

diff --git a/xbmc/utils/EGLFence.cpp b/xbmc/utils/EGLFence.cpp
index 9d0065bdaf07..535e3bce3197 100644
--- a/xbmc/utils/EGLFence.cpp
+++ b/xbmc/utils/EGLFence.cpp
@@ -22,14 +22,6 @@ CEGLFence::CEGLFence(EGLDisplay display)
     m_eglGetSyncAttribKHR(
         CEGLUtils::GetRequiredProcAddress<PFNEGLGETSYNCATTRIBKHRPROC>("eglGetSyncAttribKHR"))
 {
-#if defined(EGL_ANDROID_native_fence_sync) && defined(EGL_KHR_fence_sync)
-  m_eglDupNativeFenceFDANDROID =
-      CEGLUtils::GetRequiredProcAddress<PFNEGLDUPNATIVEFENCEFDANDROIDPROC>(
-          "eglDupNativeFenceFDANDROID");
-  m_eglClientWaitSyncKHR =
-      CEGLUtils::GetRequiredProcAddress<PFNEGLCLIENTWAITSYNCKHRPROC>("eglClientWaitSyncKHR");
-  m_eglWaitSyncKHR = CEGLUtils::GetRequiredProcAddress<PFNEGLWAITSYNCKHRPROC>("eglWaitSyncKHR");
-#endif
 }
 
 void CEGLFence::CreateFence()
@@ -79,65 +71,3 @@ bool CEGLFence::IsSignaled()
 
   return false;
 }
-
-#if defined(EGL_ANDROID_native_fence_sync) && defined(EGL_KHR_fence_sync)
-EGLSyncKHR CEGLFence::CreateFence(int fd)
-{
-  CEGLAttributes<1> attributeList;
-  attributeList.Add({{EGL_SYNC_NATIVE_FENCE_FD_ANDROID, fd}});
-
-  EGLSyncKHR fence =
-      m_eglCreateSyncKHR(m_display, EGL_SYNC_NATIVE_FENCE_ANDROID, attributeList.Get());
-
-  if (fence == EGL_NO_SYNC_KHR)
-  {
-    CEGLUtils::Log(LOGERROR, "failed to create EGL sync object");
-    return nullptr;
-  }
-
-  return fence;
-}
-
-void CEGLFence::CreateGPUFence()
-{
-  m_gpuFence = CreateFence(EGL_NO_NATIVE_FENCE_FD_ANDROID);
-}
-
-void CEGLFence::CreateKMSFence(int fd)
-{
-  m_kmsFence = CreateFence(fd);
-}
-
-EGLint CEGLFence::FlushFence()
-{
-  EGLint fd = m_eglDupNativeFenceFDANDROID(m_display, m_gpuFence);
-  if (fd == EGL_NO_NATIVE_FENCE_FD_ANDROID)
-    CEGLUtils::Log(LOGERROR, "failed to duplicate EGL fence fd");
-
-  m_eglDestroySyncKHR(m_display, m_gpuFence);
-
-  return fd;
-}
-
-void CEGLFence::WaitSyncGPU()
-{
-  if (!m_kmsFence)
-    return;
-
-  if (m_eglWaitSyncKHR(m_display, m_kmsFence, 0) != EGL_TRUE)
-    CEGLUtils::Log(LOGERROR, "failed to create EGL sync point");
-}
-
-void CEGLFence::WaitSyncCPU()
-{
-  if (!m_kmsFence)
-    return;
-
-  EGLint status{EGL_FALSE};
-
-  while (status != EGL_CONDITION_SATISFIED_KHR)
-    status = m_eglClientWaitSyncKHR(m_display, m_kmsFence, 0, EGL_FOREVER_KHR);
-
-  m_eglDestroySyncKHR(m_display, m_kmsFence);
-}
-#endif
diff --git a/xbmc/utils/EGLFence.h b/xbmc/utils/EGLFence.h
index 03c246b60b67..bd96444e47e5 100644
--- a/xbmc/utils/EGLFence.h
+++ b/xbmc/utils/EGLFence.h
@@ -30,14 +30,6 @@ public:
   void DestroyFence();
   bool IsSignaled();
 
-#if defined(EGL_ANDROID_native_fence_sync) && defined(EGL_KHR_fence_sync)
-  void CreateKMSFence(int fd);
-  void CreateGPUFence();
-  EGLint FlushFence();
-  void WaitSyncGPU();
-  void WaitSyncCPU();
-#endif
-
 private:
   EGLDisplay m_display{nullptr};
   EGLSyncKHR m_fence{nullptr};
@@ -45,17 +37,6 @@ private:
   PFNEGLCREATESYNCKHRPROC m_eglCreateSyncKHR{nullptr};
   PFNEGLDESTROYSYNCKHRPROC m_eglDestroySyncKHR{nullptr};
   PFNEGLGETSYNCATTRIBKHRPROC m_eglGetSyncAttribKHR{nullptr};
-
-#if defined(EGL_ANDROID_native_fence_sync) && defined(EGL_KHR_fence_sync)
-  EGLSyncKHR CreateFence(int fd);
-
-  EGLSyncKHR m_gpuFence{EGL_NO_SYNC_KHR};
-  EGLSyncKHR m_kmsFence{EGL_NO_SYNC_KHR};
-
-  PFNEGLDUPNATIVEFENCEFDANDROIDPROC m_eglDupNativeFenceFDANDROID{nullptr};
-  PFNEGLCLIENTWAITSYNCKHRPROC m_eglClientWaitSyncKHR{nullptr};
-  PFNEGLWAITSYNCKHRPROC m_eglWaitSyncKHR{nullptr};
-#endif
 };
 
 }
-- 
2.47.3

